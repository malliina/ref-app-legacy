AWSTemplateFormatVersion: '2010-09-09'

# App stack creation prerequisites: first create a VPC stack

Description: Elastic Beanstalk

Parameters:

  ApplicationName:
    Description: Name of your application
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  EnvironmentName:
    Description: Name of your environment
    Type: String
    MinLength: 4
    MaxLength: 255
    Default: refapp

  BeanstalkPlatform:
    Type: String
    Description: Beanstalk Platform - docker or java
    Default: java
    AllowedValues:
      - docker
      - java

  CNAMEPrefix:
    Description: CNAME prefix for Beanstalk URL (optional)
    Type: String
    MinLength: 0
    MaxLength: 512
    Default: ""

  NetworkStackName:
    Description: Name of an active CloudFormation stack of networking resources
    Type: String
    Default: vpc
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  EC2KeyPairName:
    Description: EC2 key pair name for SSH access
    Type: AWS::SSM::Parameter::Value<AWS::EC2::KeyPair::KeyName>
    Default: /dev/keypairs/bastion

  InstanceType:
    Description: The instance type for the dev environment (SSM parameter)
    Type: AWS::SSM::Parameter::Value<String>
    Default: /dev/beanstalk/instanceClass
    MinLength: 1
    MaxLength: 255

  SSLCertificateArn:
    Description: The SSL/TLS certificate ARN (optional)
    Type: String
    MinLength: 0
    MaxLength: 2048
    Default: ""

  AutoScalingMinInstanceCount:
    Description: Minimum number of EC2 instances for Auto Scaling
    Type: Number
    MinValue: 1
    MaxValue: 20
    Default: 1
    ConstraintDescription: Specify a number between 1 - 20

  AutoScalingMaxInstanceCount:
    Description: Maximum number of EC2 instances for Auto Scaling
    Type: Number
    MinValue: 1
    MaxValue: 20
    Default: 4
    ConstraintDescription: Specify a number between 1 - 20

Conditions:

  TlsEnabled: !Not [ !Equals [ !Ref SSLCertificateArn, "" ] ]
  HasCNAMEPrefix: !Not [ !Equals [ !Ref CNAMEPrefix, "" ] ]

Mappings:
  # Maps stack type parameter to solution stack name string
  StackMap:
    docker:
      stackName: 64bit Amazon Linux 2018.03 v2.14.1 running Docker 18.09.9-ce
    java:
      stackName: 64bit Amazon Linux 2018.03 v2.10.2 running Java 8

Resources:

  ElasticBeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "elasticbeanstalk.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService

  Environment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref ApplicationName
      CNAMEPrefix: !If [ HasCNAMEPrefix, !Ref CNAMEPrefix, !Ref "AWS::NoValue" ]
      TemplateName: !Ref ConfigurationTemplate
    DependsOn:
      - ConfigurationTemplate

  # The configuration template contains environment parameters such as those
  # that relate to the autoscaling group (e.g. size, triggers), placement of
  # resources in the VPC, load balancer setup, and environment variables
  ConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref ApplicationName
      SolutionStackName: !FindInMap [ StackMap, !Ref BeanstalkPlatform, stackName ]
      OptionSettings:

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: LoadBalancerType
        Value: application

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: ServiceRole
        Value: !Ref ElasticBeanstalkServiceRole

        # AUTOSCALING OPTIONS
      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: !Ref AutoScalingMinInstanceCount

      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: !Ref AutoScalingMaxInstanceCount

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SecurityGroups
        Value:
          Fn::ImportValue: !Sub ${NetworkStackName}-AppSecurityGroupID

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SSHSourceRestriction
        Value:
          "Fn::Join":
          - ','
          - - 'tcp, 22, 22'
            - !ImportValue
                "Fn::Sub": "${NetworkStackName}-BastionGroupID"

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: InstanceType
        Value: !Ref InstanceType

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: !Ref AppInstanceProfile

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName
        Value: !Ref EC2KeyPairName

      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateEnabled
        Value: true

      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateType
        Value: Health

      - Namespace: aws:autoscaling:trigger
        OptionName: MeasureName
        Value: CPUUtilization

      - Namespace: aws:autoscaling:trigger
        OptionName: Unit
        Value: Percent

      - Namespace: aws:autoscaling:trigger
        OptionName: UpperThreshold
        Value: 80

      - Namespace: aws:autoscaling:trigger
        OptionName: LowerThreshold
        Value: 40

        # VPC OPTIONS (PLACEMENT OF RESOURCES IN SUBNETS)
      - Namespace: aws:ec2:vpc
        OptionName: VPCId
        Value:
          Fn::ImportValue: !Sub ${NetworkStackName}-VpcID

      - Namespace: aws:ec2:vpc
        OptionName: Subnets
        Value:
          "Fn::Join":
          - ','
          - - !ImportValue
                "Fn::Sub": ${NetworkStackName}-PrivateSubnet1ID
            - !ImportValue
                "Fn::Sub": ${NetworkStackName}-PrivateSubnet2ID

      - Namespace: aws:ec2:vpc
        OptionName: ELBSubnets
        Value:
          "Fn::Join":
          - ','
          - - !ImportValue
                "Fn::Sub": ${NetworkStackName}-PublicSubnet1ID
            - !ImportValue
                "Fn::Sub": ${NetworkStackName}-PublicSubnet2ID

      - Namespace: aws:elbv2:listener:default
        OptionName: ListenerEnabled
        Value: !If [ TlsEnabled, false, true ]

      - Namespace: aws:elbv2:loadbalancer
        OptionName: SecurityGroups
        Value:
          Fn::ImportValue: !Sub ${NetworkStackName}-ELBSecurityGroupID

      - Namespace: aws:elbv2:loadbalancer
        OptionName: ManagedSecurityGroup
        Value:
           Fn::ImportValue: !Sub ${NetworkStackName}-ELBSecurityGroupID

      - Namespace: aws:elbv2:listenerrule:default
        OptionName: PathPatterns
        Value: "/*"

      - Namespace: !Sub
        - "aws:elbv2:listener:${ListenPort}"
        - ListenPort:
            "Fn::ImportValue": !Sub ${NetworkStackName}-ELBIngressPort
        OptionName: Protocol
        Value: !If [ TlsEnabled, HTTPS, HTTP ]

      - Namespace: !Sub
        - "aws:elbv2:listener:${ListenPort}"
        - ListenPort:
            "Fn::ImportValue": !Sub ${NetworkStackName}-ELBIngressPort
        OptionName: Rules
        Value: default

      - Namespace: !Sub
        - "aws:elbv2:listener:${ListenPort}"
        - ListenPort:
            "Fn::ImportValue": !Sub ${NetworkStackName}-ELBIngressPort
        OptionName: SSLCertificateArns
        Value: !Ref SSLCertificateArn

        # CLOUDWATCH LOGS
      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: StreamLogs
        Value: true

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: DeleteOnTerminate
        Value: true

        # ENVIRONMENT VARIABLES
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_REGION
        Value: !Ref AWS::Region

      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: PORT
        Value: 9000

      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: APPLICATION_SECRET
        Value: !Join ['', ['{{resolve:secretsmanager:', 'dev/refapp/secrets', ':SecretString:appsecret}}' ]]

  # IAM resources
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  AppPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: App
      Roles:
      - !Ref AppRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action: "*"
            Resource: "*"

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref AppRole

Outputs:

  Name:
    Description: Elastic Beanstalk Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  EnvironmentURL:
    Description: Environment URL
    Value: !GetAtt Environment.EndpointURL
    Export:
      Name: !Sub ${AWS::StackName}-EnvironmentURL

  BeanstalkURL:
    Condition: HasCNAMEPrefix
    Description: Beanstalk environment elasticbeanstalk.com URL
    Value: !Join
      - ''
      - - !Ref CNAMEPrefix
        - !Sub '.${AWS::Region}.elasticbeanstalk.com'
    Export:
      Name: !Sub ${AWS::StackName}-BeanstalkURL

  EnvironmentName:
    Description: Environment Name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub ${AWS::StackName}-EnvironmentName
